/* Lexer.java */
/* Generated By:JavaCC: Do not edit this line. Lexer.java */
package com.hugovs.jps;

import java.util.List;
import java.util.ArrayList;
import java.util.Stack;
import java.io.*;
import com.hugovs.jps.structure.semanthic.*;
import com.hugovs.jps.structure.semanthic.command.*;
import com.hugovs.jps.structure.semanthic.operation.*;
import com.hugovs.jps.structure.exception.*;

public class Lexer implements LexerConstants {

    public static Block program = new Block();
    public static int blockCount = 0;
    public static Stack<Block> stack = new Stack<Block>();
    public static int lineCount = 0;

    public static void main(String[] args) {
        try {
            new Lexer(new java.io.FileInputStream(args[0])).S();
            System.out.println("Syntax is okay");
            System.out.println("Program structure: ");
            Lexer.program.print();
        } catch (Throwable e) {
               // Catching Throwable is ugly but JavaCC throws Error objects!
             System.out.println("Syntax check failed: " + e.getMessage());
             e.printStackTrace();
        }

        try {
            String ir = "";
             System.out.println("------------------- LLVM IR -------------------\u005cn\u005cn" + (ir = Lexer.program.toIR(0).code) + "--------------------------------------------------");
             FileOutputStream out = new FileOutputStream("ir.ll");
             out.write(ir.getBytes());
             out.close();
        } catch (Throwable e) {
            System.out.println("Failed to create LLVM IR");
            e.printStackTrace();
        }

    }

// Regra inicial
  static final public void S() throws ParseException {
    PROGRAM();
    jj_consume_token(0);

  }

// Regra do programa
  static final public void PROGRAM() throws ParseException {Block program = Lexer.program;
        Block block = null;
    block = ROOT_BLOCK();
program = block;

        Identifier main = block.getIdentifier("main");
        if (!(main instanceof Subprogram))
            {if (true) throw new IncompatibleTypeException("Main not found");}

        Lexer.program = program;
  }

// Regra de Sub-Programa
  static final public Subprogram SUB_PROGRAM() throws ParseException {Subprogram subprogram = new Subprogram();
        Block block, parent = Lexer.stack.peek();
        Token typeToken = null, idToken = null;
        List<Variable> parameters = new ArrayList<Variable>();
    jj_consume_token(DEF);
    idToken = jj_consume_token(ID);
    jj_consume_token(LPAREN);
    if (jj_2_1(8)) {
      parameters = PARAMETERS();
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    if (jj_2_2(8)) {
      jj_consume_token(COLON);
      typeToken = jj_consume_token(TYPE);
    } else {
      ;
    }
String id = idToken.toString();
                    Type returnType = typeToken == null ? Type.VOID : Type.valueOf(typeToken.toString().toUpperCase());
                    subprogram.setId(id);
                    subprogram.setReturnType(returnType);
                    subprogram.setParameters(parameters);
                    Lexer.stack.peek().addIdentifier(subprogram);
    block = BLOCK(parameters);
subprogram.setBlock(block);

        for (Command cmd : block.getCommands())
            if (cmd instanceof ReturnCommand) {
                ReturnCommand returnCmd = (ReturnCommand)cmd;
                if (returnCmd.getExpression().getType() != subprogram.getReturnType())
                    {if (true) throw new IncompatibleTypeException(returnCmd.getExpression().getType(), subprogram.getReturnType());}
            }

        {if ("" != null) return subprogram;}
    throw new Error("Missing return statement in function");
  }

// Bloco inicial do programa
  static final public Block ROOT_BLOCK() throws ParseException {Block block = new Block();
        Lexer.stack.push(block);
        List<Variable> varList = null;
    if (jj_2_3(8)) {
      varList = VAR_SECTION();
block.addAll(varList);
    } else {
      ;
    }
    if (jj_2_4(8)) {
      STATEMENT();
    } else {
      ;
    }
Lexer.stack.pop();
        {if ("" != null) return block;}
    throw new Error("Missing return statement in function");
  }

// Blocos internos no programa
  static final public Block BLOCK(List<Variable> parameters) throws ParseException {Lexer.blockCount++;
        Block block = new Block();
        block.setParent(Lexer.stack.peek());
        block.addAll(parameters);
        Lexer.stack.push(block);
        List<Variable> varList = null;
    if (jj_2_7(8)) {
      jj_consume_token(LBRACE);
      if (jj_2_5(8)) {
        varList = VAR_SECTION();
block.addAll(varList);
      } else {
        ;
      }
      if (jj_2_6(8)) {
        STATEMENT();
      } else {
        ;
      }
      jj_consume_token(RBRACE);
    } else if (jj_2_8(8)) {
      STATEMENT();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
Lexer.stack.pop();
        {if ("" != null) return block;}
    throw new Error("Missing return statement in function");
  }

//void SUB_PROGRAM_CALL(): {} { }
  static final public 
void STATEMENT() throws ParseException {Block block = Lexer.stack.peek();
        Subprogram sub = null;
        Command cmd = null;
    if (jj_2_9(8)) {
      sub = SUB_PROGRAM();
    } else if (jj_2_10(8)) {
      cmd = CMD();
block.addCommand(cmd);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_11(8)) {
      STATEMENT();
    } else {
      ;
    }

  }

// Command syntax
  static final public Command CMD() throws ParseException {Command cmd = null;
    if (jj_2_12(8)) {
      cmd = CMD_RETURN();
    } else if (jj_2_13(8)) {
      cmd = CMD_WHILE();
    } else if (jj_2_14(8)) {
      cmd = CMD_SKIP();
    } else if (jj_2_15(8)) {
      cmd = CMD_STOP();
    } else if (jj_2_16(8)) {
      cmd = CMD_WRITE();
    } else if (jj_2_17(8)) {
      cmd = CMD_READ();
    } else if (jj_2_18(8)) {
      cmd = CMD_IF();
    } else if (jj_2_19(8)) {
      cmd = CMD_ATTRIB();
      jj_consume_token(SEMICOLON);
    } else if (jj_2_20(8)) {
      cmd = CMD_FOR();
    } else if (jj_2_21(8)) {
      cmd = CMD_SUB();
      jj_consume_token(SEMICOLON);
    } else if (jj_2_22(8)) {
      jj_consume_token(SEMICOLON);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
cmd.block = Lexer.stack.peek();
        {if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
  }

  static final public Command CMD_RETURN() throws ParseException {ReturnCommand cmd = new ReturnCommand();
        Expression exp = new Expression();
        exp.setType(Type.VOID);
    jj_consume_token(CMD_RETURN);
    if (jj_2_23(8)) {
      exp = EXPRESSION();
    } else {
      ;
    }
    jj_consume_token(SEMICOLON);
cmd.setExpression(exp);
        {if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
  }

  static final public Command CMD_SUB() throws ParseException {SubCommand cmd = new SubCommand();
        Block block = Lexer.stack.peek();
        Token idToken = null;
        List<Expression> arguments = new ArrayList<Expression>();
        Expression exp = null;
    idToken = jj_consume_token(ID);
    jj_consume_token(LPAREN);
    if (jj_2_25(8)) {
      exp = EXPRESSION();
arguments.add(exp);
      label_1:
      while (true) {
        if (jj_2_24(8)) {
          ;
        } else {
          break label_1;
        }
        jj_consume_token(COMMA);
        exp = EXPRESSION();
arguments.add(exp);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
Identifier id = block.getIdentifier(idToken.toString());
        if (!(id instanceof Subprogram))
            {if (true) throw new IncompatibleTypeException("Expected: Subprogram. Found: Variable");}
        Subprogram sub = (Subprogram)id;

        if (sub.getParameters().size() != arguments.size())
            {if (true) throw new RuntimeException("Subprogram " + sub.getId() + " has " + sub.getParameters().size() + " parameters. Found: " + arguments.size() + " arguments.");}
        for (int i = 0; i < sub.getParameters().size(); i++) {
            Variable var = sub.getParameters().get(i);
            Expression aExp = arguments.get(i);
            if (var.getType() != aExp.getType())
                {if (true) throw new IncompatibleTypeException("Incompatible type in argument " + i + ". Expected: " + var.getType() + ". Found: " + aExp.getType());}
        }

        cmd.setSubprogram(sub);
        cmd.setArguments(arguments);

        {if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
  }

  static final public Command CMD_WHILE() throws ParseException {WhileCommand cmd = new WhileCommand();
        Expression exp = null;
        Block block = null;
    jj_consume_token(CMD_WHILE);
    jj_consume_token(LPAREN);
    exp = EXPRESSION();
    jj_consume_token(RPAREN);
    block = BLOCK(new ArrayList());
if (exp.getType() != Type.BOOL)
            {if (true) throw new IncompatibleTypeException(Type.BOOL, exp.getType());}

        cmd.setExpression(exp);
        cmd.setBlock(block);
        {if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
  }

  static final public Command CMD_IF() throws ParseException {IfCommand cmd = new IfCommand();
        Command elseCmd = null;
        Expression exp = null;
        Block block = null;
    jj_consume_token(CMD_IF);
    jj_consume_token(LPAREN);
    exp = EXPRESSION();
    jj_consume_token(RPAREN);
    block = BLOCK(new ArrayList());
    if (jj_2_26(8)) {
      elseCmd = CMD_ELSE();
    } else {
      ;
    }
if (exp.getType() != Type.BOOL)
            {if (true) throw new IncompatibleTypeException(Type.BOOL, exp.getType());}

        cmd.setExpression(exp);
        cmd.setElseCommand((ElseCommand)elseCmd);
        cmd.setBlock(block);

        {if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
  }

  static final public Command CMD_ELSE() throws ParseException {ElseCommand cmd = new ElseCommand();
        Command ifCmd = null;
        Block block = null;
    jj_consume_token(CMD_ELSE);
    if (jj_2_27(8)) {
      ifCmd = CMD_IF();
    } else if (jj_2_28(8)) {
      block = BLOCK(new ArrayList());
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
cmd.setBlock(block);
        cmd.setIfCommand((IfCommand)ifCmd);
        {if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
  }

  static final public Command CMD_FOR() throws ParseException {ForCommand cmd = new ForCommand();
        Expression cond = null;
        Block block = null;
        Command acmd = null;
        List<AttributionCommand> first = new ArrayList<AttributionCommand>(), second = new ArrayList<AttributionCommand>();
    jj_consume_token(CMD_FOR);
    jj_consume_token(LPAREN);
    if (jj_2_30(8)) {
      acmd = CMD_ATTRIB();
first.add((AttributionCommand)acmd);
      label_2:
      while (true) {
        if (jj_2_29(8)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(COMMA);
        CMD_ATTRIB();
first.add((AttributionCommand)acmd);
      }
    } else {
      ;
    }
    jj_consume_token(SEMICOLON);
    cond = EXPRESSION();
    jj_consume_token(SEMICOLON);
    if (jj_2_32(8)) {
      acmd = CMD_ATTRIB();
second.add((AttributionCommand)acmd);
      label_3:
      while (true) {
        if (jj_2_31(8)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(COMMA);
        acmd = CMD_ATTRIB();
second.add((AttributionCommand)acmd);
      }
    } else {
      ;
    }
    jj_consume_token(RPAREN);
    block = BLOCK(new ArrayList());
if (cond.getType() != Type.BOOL)
            {if (true) throw new IncompatibleTypeException(Type.BOOL, cond.getType());}

        cmd.setFirstAttributionCommands(first);
        cmd.setSecondAttributionCommands(second);
        cmd.setCondition(cond);
        cmd.setBlock(block);
        {if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
  }

  static final public Command CMD_READ() throws ParseException {ReadCommand cmd = new ReadCommand();
        Token idToken = null;
        Expression arrayExp = null;
    jj_consume_token(CMD_READ);
    idToken = jj_consume_token(ID);
    if (jj_2_33(8)) {
      jj_consume_token(LBRACK);
      arrayExp = EXPRESSION();
      jj_consume_token(RBRACK);
    } else {
      ;
    }
    jj_consume_token(SEMICOLON);
String idStr = idToken.toString();
        Block block = Lexer.stack.peek();

        Identifier id = block.getIdentifier(idStr);

        if (!(id instanceof Variable))
            {if (true) throw new IncompatibleTypeException("Expected: Variable. Found: Subprogram");}
        Variable var = (Variable)id;
        if (arrayExp != null && !var.isArray())
            {if (true) throw new IncompatibleTypeException("Variable " + var.getId() + " is not and array");}

        var.setVarValue(new Value(var.getType(), null));
        cmd.setVariable(var);
        {if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
  }

  static final public Command CMD_WRITE() throws ParseException {WriteCommand cmd = new WriteCommand();
        List<Expression> expList = new ArrayList<Expression>();
        Expression exp = null;
    jj_consume_token(CMD_WRITE);
    exp = EXPRESSION();
expList.add(exp);
    label_4:
    while (true) {
      if (jj_2_34(8)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(COMMA);
      exp = EXPRESSION();
expList.add(exp);
    }
    jj_consume_token(SEMICOLON);
cmd.setExpressions(expList);
        {if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
  }

  static final public Command CMD_STOP() throws ParseException {StopCommand cmd = new StopCommand();
    jj_consume_token(CMD_STOP);
    jj_consume_token(SEMICOLON);
cmd.label = Lexer.stack.peek().outLabel;
        {if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
  }

  static final public Command CMD_SKIP() throws ParseException {SkipCommand cmd = new SkipCommand();
    jj_consume_token(CMD_SKIP);
    jj_consume_token(SEMICOLON);
cmd.label = Lexer.stack.peek().inLabel;
        {if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
  }

  static final public Command CMD_ATTRIB() throws ParseException {AttributionCommand cmd = new AttributionCommand();
        Block block = Lexer.stack.peek();
        Expression arrayExp = null, exp = null;
        Token idToken = null;
        Token opToken = null;
    if (jj_2_36(8)) {
      idToken = jj_consume_token(ID);
      if (jj_2_35(8)) {
        jj_consume_token(LBRACK);
        arrayExp = EXPRESSION();
        jj_consume_token(RBRACK);
      } else {
        ;
      }
    } else if (jj_2_37(8)) {
      jj_consume_token(ID);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_38(8)) {
      opToken = jj_consume_token(OP);
    } else {
      ;
    }
    jj_consume_token(ATTR);
    exp = EXPRESSION();
String idStr = idToken.toString();
        Identifier id = block.getIdentifier(idStr);

        if (!(id instanceof Variable))
            {if (true) throw new IncompatibleTypeException("Expected: Variable. Found: Subprogram");}
        Variable var = (Variable)id;

        if (var.getType() != exp.getType())
            {if (true) throw new IncompatibleTypeException(var.getType(), exp.getType());}

        if (arrayExp != null && !var.isArray())
            {if (true) throw new IncompatibleTypeException("Variable " + var.getId() + " is not and array.");}

        if (arrayExp != null && arrayExp.getType() != Type.INT)
            {if (true) throw new IncompatibleTypeException(Type.INT, arrayExp.getType());}

        if (opToken != null && var.getVarValue() != null) {
            Operation op = Operation.getForToken(opToken, null, null, var);
            op.setFirstOperand(var);
            op.setSecondOperand(exp);
            exp = new Expression();
            exp.setType(var.getType());
            exp.addOperation(op);
        } else if (opToken != null && var.getVarValue() == null) {
            {if (true) throw new VariableNotInitializedException(var.getId());}
        }


        cmd.position = arrayExp;
        var.setVarValue(exp);
        cmd.setExpression(exp);
        cmd.setVariable(var);

        {if ("" != null) return cmd;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression EXPRESSION() throws ParseException {Expression exp = new Expression(), first, second;
        Value v = null;
        Operation op = null;
    if (jj_2_39(8)) {
      op = OPERATION();
    } else if (jj_2_40(8)) {
      v = VALUE();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
if (v != null) {
            exp.setSingleton(true);
            exp.setType(v.getType());
            exp.setValue(v);
        } else if (op != null) {
            exp.setSingleton(false);
            exp.setType(op.getType());
            exp.addOperation(op);
        }

        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

// Regra base para declaração de umaou mais variáveis
  static final public List<Variable> VAR() throws ParseException {List<Variable> varList;
        Token typeToken;
    jj_consume_token(VAR);
    varList = VAR_LIST();
    jj_consume_token(COLON);
    typeToken = jj_consume_token(TYPE);
Type type = Type.valueOf(typeToken.toString().toUpperCase());
        Util.updateVariableTypes(varList, type);

        {if ("" != null) return varList;}
    throw new Error("Missing return statement in function");
  }

// Lista de variáveis
  static final public List<Variable> VAR_LIST() throws ParseException {List<Variable> varList = new ArrayList<Variable>(), ret = new ArrayList<Variable>();
        Variable var = new Variable();
        Token idToken;
        Expression arrayExp = null, attrExp = null;
        List<Value> list = new ArrayList<Value>();
        boolean isArray = false;
        AttributionCommand cmd = new AttributionCommand();
    if (jj_2_45(8)) {
      idToken = jj_consume_token(ID);
      jj_consume_token(LBRACK);
      arrayExp = EXPRESSION();
      jj_consume_token(RBRACK);
      if (jj_2_41(8)) {
        jj_consume_token(ATTR);
        list = ARRAY_INIT();
      } else {
        ;
      }
      if (jj_2_42(8)) {
        jj_consume_token(COMMA);
        ret = VAR_LIST();
      } else {
        ;
      }
isArray = true;
    } else if (jj_2_46(8)) {
      idToken = jj_consume_token(ID);
      if (jj_2_43(8)) {
        jj_consume_token(ATTR);
        attrExp = EXPRESSION();
      } else {
        ;
      }
      if (jj_2_44(8)) {
        jj_consume_token(COMMA);
        ret = VAR_LIST();
      } else {
        ;
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
String id = idToken.toString();

        if (arrayExp != null && arrayExp.getType() != Type.INT)
            {if (true) throw new IncompatibleTypeException(Type.INT, arrayExp.getType());}

        if (attrExp != null && arrayExp == null) {
            var.setVarValue(attrExp);
            cmd.setVariable(var);
            cmd.setExpression(attrExp);
            Lexer.stack.peek().addCommand(cmd);
        } else if (arrayExp != null) {
            var.setValues(list);
        }

        var.setId(id);
        var.setArray(isArray);
        var.setLength(Integer.MAX_VALUE);
        varList.addAll(ret);
        varList.add(var);
        {if ("" != null) return varList;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Value> ARRAY_INIT() throws ParseException {List<Value> list = new ArrayList<Value>();
        Expression exp = null;
    jj_consume_token(LBRACE);
    if (jj_2_48(8)) {
      exp = EXPRESSION();
list.add(exp);
      label_5:
      while (true) {
        if (jj_2_47(8)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(COMMA);
        exp = EXPRESSION();
list.add(exp);
      }
    } else {
      ;
    }
    jj_consume_token(RBRACE);
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
  }

// Seção de variáveis separadas por ponto e vírgula
  static final public List<Variable> VAR_SECTION() throws ParseException {List<Variable> varList = null, ret = null;
    varList = VAR();
    jj_consume_token(SEMICOLON);
    if (jj_2_49(8)) {
      ret = VAR_SECTION();
    } else {
      ;
    }
if (ret != null)
            varList.addAll(ret);
        {if ("" != null) return varList;}
    throw new Error("Missing return statement in function");
  }

// Regra de definição de parâmetros de sub-programa
  static final public List<Variable> PARAMETERS() throws ParseException {List<Variable> varList, v2 = null;
            Token typeToken;
    varList = PARAM_LIST();
    jj_consume_token(COLON);
    typeToken = jj_consume_token(TYPE);
    if (jj_2_50(8)) {
      jj_consume_token(SEMICOLON);
      v2 = PARAMETERS();
    } else {
      ;
    }
Type type = Type.valueOf(typeToken.toString().toUpperCase());
            Util.updateVariableTypes(varList, type);

            if (v2 != null)
                varList.addAll(v2);

            {if ("" != null) return varList;}
    throw new Error("Missing return statement in function");
  }

  static final public List<Variable> PARAM_LIST() throws ParseException {List<Variable> varList = new ArrayList<Variable>(), ret = new ArrayList<Variable>();
        Variable var = new Variable();
        Token idToken;
        boolean isArray = false;
    if (jj_2_53(8)) {
      idToken = jj_consume_token(ID);
      jj_consume_token(LBRACK);
      jj_consume_token(RBRACK);
      if (jj_2_51(8)) {
        jj_consume_token(COMMA);
        ret = PARAM_LIST();
      } else {
        ;
      }
isArray = true;
    } else if (jj_2_54(8)) {
      idToken = jj_consume_token(ID);
      if (jj_2_52(8)) {
        jj_consume_token(COMMA);
        ret = PARAM_LIST();
      } else {
        ;
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
String id = idToken.toString();

        var.setId(id);
        var.setArray(isArray);
        var.setLength(Integer.MAX_VALUE);

        Variable aux = new Variable();
        aux.setId(var.getId());
        aux.setType(var.getType());
        Value value = new Value(var.getType(), aux);

        var.setValue(value);
        var.setVarValue(new Value());
        var.setParameter(true);
        varList.addAll(ret);
        varList.add(var);
        {if ("" != null) return varList;}
    throw new Error("Missing return statement in function");
  }

  static final public Value VALUE() throws ParseException {Token idToken = null, numToken = null, boolToken = null, strToken = null;
        Block block = Lexer.stack.peek();
        Value value = new Value();
        Expression arrayExp = null;
        Expression ter = null;
        Command sub = null;
    if (jj_2_67(8)) {
      if (jj_2_55(8)) {
        numToken = jj_consume_token(NUM);
      } else if (jj_2_56(8)) {
        boolToken = jj_consume_token(BOOL);
      } else if (jj_2_57(8)) {
        strToken = jj_consume_token(STR);
      } else if (jj_2_58(8)) {
        idToken = jj_consume_token(ID);
        jj_consume_token(LBRACK);
        arrayExp = EXPRESSION();
        jj_consume_token(RBRACK);
      } else if (jj_2_59(8)) {
        sub = CMD_SUB();
      } else if (jj_2_60(8)) {
        idToken = jj_consume_token(ID);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_68(8)) {
      jj_consume_token(LPAREN);
      if (jj_2_61(8)) {
        numToken = jj_consume_token(NUM);
      } else if (jj_2_62(8)) {
        boolToken = jj_consume_token(BOOL);
      } else if (jj_2_63(8)) {
        strToken = jj_consume_token(STR);
      } else if (jj_2_64(8)) {
        idToken = jj_consume_token(ID);
        jj_consume_token(LBRACK);
        numToken = jj_consume_token(NUM);
        jj_consume_token(RBRACK);
      } else if (jj_2_65(8)) {
        sub = CMD_SUB();
      } else if (jj_2_66(8)) {
        idToken = jj_consume_token(ID);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAREN);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
Type type = null;

        if (ter != null) {if ("" != null) return ter;}

        Integer num = null;
        if (numToken != null && idToken == null) {
            num = Integer.valueOf(numToken.toString());
            value.setValue(num);
            type = Type.INT;
        }

        Boolean bool = null;
        if (boolToken != null) {
            bool = Boolean.valueOf(boolToken.toString());
            value.setValue(bool);
            type = Type.BOOL;
        }

        String str = null;
        if (strToken != null) {
            str = strToken.toString();
            value.setValue(str);
            type = Type.STRING;
        }

        Identifier id = null;
        if (idToken != null) {
            id = block.getIdentifier(idToken.toString());
            if (id instanceof Variable) {
                Variable var = ((Variable) id);
                type = var.getType();
                if (arrayExp != null) {
                    if (!var.isArray()) {if (true) throw new IncompatibleTypeException("Variable " + id + " is not an array");}
                    if (arrayExp.getType() != Type.INT) {if (true) throw new IncompatibleTypeException(Type.INT, arrayExp.getType());}
                    value.position = arrayExp;
                    value.setValue(var);
                } else {
                    value.setValue(var);
                }

                if (!var.isInitialized() && block.hasIdentifier(var.getId()))
                    {if (true) throw new VariableNotInitializedException(var.getId());}
            }
        }

        if (sub != null) {
            SubCommand s = (SubCommand)sub;
            type = s.getSubprogram().getReturnType();
            s.getSubprogram().arguments = s.getArguments();
            value.setValue(s.getSubprogram());
        }

        value.setType(type);
        {if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

  static final public Operation OPERATION() throws ParseException {Value v1 = null, v2 = null;
        Token tokenOp = null, tokenBop = null, tokenCop = null;
    if (jj_2_83(8)) {
      if (jj_2_69(8)) {
        v1 = VALUE();
      } else if (jj_2_70(8)) {
        jj_consume_token(LPAREN);
        v1 = OPERATION();
        jj_consume_token(RPAREN);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_71(8)) {
        tokenOp = jj_consume_token(OP);
      } else if (jj_2_72(8)) {
        tokenBop = jj_consume_token(BOP);
      } else if (jj_2_73(8)) {
        tokenCop = jj_consume_token(COP);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_74(8)) {
        v2 = OPERATION();
      } else if (jj_2_75(8)) {
        v2 = VALUE();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_84(8)) {
      if (jj_2_76(8)) {
        v1 = VALUE();
      } else if (jj_2_77(8)) {
        jj_consume_token(LPAREN);
        v1 = OPERATION();
        jj_consume_token(RPAREN);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_78(8)) {
        tokenOp = jj_consume_token(OP);
      } else if (jj_2_79(8)) {
        tokenBop = jj_consume_token(BOP);
      } else if (jj_2_80(8)) {
        tokenCop = jj_consume_token(COP);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAREN);
      if (jj_2_81(8)) {
        v2 = OPERATION();
      } else if (jj_2_82(8)) {
        v2 = VALUE();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RPAREN);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
Operation op = Operation.getForToken(tokenOp, tokenCop, tokenBop, v1);
        op.setOperands(v1, v2);
        {if ("" != null) return op;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_2_60(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  static private boolean jj_2_61(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  static private boolean jj_2_62(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  static private boolean jj_2_63(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  static private boolean jj_2_64(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  static private boolean jj_2_65(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  static private boolean jj_2_66(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  static private boolean jj_2_67(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  static private boolean jj_2_68(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  static private boolean jj_2_69(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  static private boolean jj_2_70(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  static private boolean jj_2_71(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  static private boolean jj_2_72(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  static private boolean jj_2_73(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  static private boolean jj_2_74(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  static private boolean jj_2_75(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  static private boolean jj_2_76(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  static private boolean jj_2_77(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  static private boolean jj_2_78(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  static private boolean jj_2_79(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  static private boolean jj_2_80(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  static private boolean jj_2_81(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  static private boolean jj_2_82(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  static private boolean jj_2_83(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  static private boolean jj_2_84(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  static private boolean jj_3_47()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_14()
 {
    if (jj_scan_token(CMD_STOP)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_54()
 {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_33()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  static private boolean jj_3_53()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(RBRACK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_26()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_80()
 {
    if (jj_scan_token(COP)) return true;
    return false;
  }

  static private boolean jj_3_73()
 {
    if (jj_scan_token(COP)) return true;
    return false;
  }

  static private boolean jj_3_49()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) return true;
    }
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    if (jj_scan_token(CMD_WRITE)) return true;
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_41()
 {
    if (jj_scan_token(ATTR)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_66()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_6()
 {
    if (jj_3R_28()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(TYPE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_79()
 {
    if (jj_scan_token(BOP)) return true;
    return false;
  }

  static private boolean jj_3_72()
 {
    if (jj_scan_token(BOP)) return true;
    return false;
  }

  static private boolean jj_3_60()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_44()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_30()
 {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_28()
 {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    if (jj_scan_token(CMD_READ)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_48()
 {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_7()
 {
    if (jj_3R_29()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_65()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_78()
 {
    if (jj_scan_token(OP)) return true;
    return false;
  }

  static private boolean jj_3R_9()
 {
    if (jj_scan_token(DEF)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_71()
 {
    if (jj_scan_token(OP)) return true;
    return false;
  }

  static private boolean jj_3_59()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_26()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_48()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3_32()
 {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_27()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_scan_token(CMD_FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_17()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_43()
 {
    if (jj_scan_token(ATTR)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_24()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_scan_token(CMD_ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    return false;
  }

  static private boolean jj_3_46()
 {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_45()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RBRACK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_77()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_16()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_70()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) return true;
    }
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_scan_token(CMD_IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_64()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_scan_token(NUM)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_76()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_69()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_84()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) return true;
    }
    }
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3_82()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_38()
 {
    if (jj_scan_token(OP)) return true;
    return false;
  }

  static private boolean jj_3_83()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) return true;
    }
    return false;
  }

  static private boolean jj_3_15()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_83()) {
    jj_scanpos = xsp;
    if (jj_3_84()) return true;
    }
    return false;
  }

  static private boolean jj_3R_29()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  static private boolean jj_3_40()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_37()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3_58()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  static private boolean jj_3R_12()
 {
    if (jj_scan_token(CMD_WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_25()
 {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_20()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_63()
 {
    if (jj_scan_token(STR)) return true;
    return false;
  }

  static private boolean jj_3_14()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_39()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_57()
 {
    if (jj_scan_token(STR)) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    return false;
  }

  static private boolean jj_3_22()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_23()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_62()
 {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_13()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_19()
 {
    if (jj_3R_18()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_56()
 {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  static private boolean jj_3_34()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_11()
 {
    if (jj_scan_token(CMD_RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_35()
 {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  static private boolean jj_3_82()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_61()
 {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3_21()
 {
    if (jj_3R_20()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_18()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_12()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3_75()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_50()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  static private boolean jj_3_29()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_51()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_55()
 {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3_68()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_67()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_36()
 {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) return true;
    }
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_38()) jj_scanpos = xsp;
    if (jj_scan_token(ATTR)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_81()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_52()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_74()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_31()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_42()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_13()
 {
    if (jj_scan_token(CMD_SKIP)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LexerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[84];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Lexer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lexer(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Lexer(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Lexer(LexerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 84; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
